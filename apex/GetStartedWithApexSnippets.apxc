/*Apex Collections: List
Lists hold an ordered collection of objects. Lists in Apex are synonymous with arrays and the two can be used interchangeably.

The following two declarations are equivalent. The colors variable is declared using the List syntax.*/

List<String> colors = new List<String>();

//Alternatively, the colors variable can be declared as an array but assigned to a list rather than an array.
String[] colors = new List<String>();

/*Generally, it’s easier to create a list rather than an array because lists don’t require you 
to determine ahead of time how many elements you need to allocate.

You can add elements to a list when creating the list, or after creating the list 
by calling the add() method. This first example shows you both ways of adding elements to a list.*/

// Create a list and add elements to it in one step
List<String> colors = new List<String> { 'red', 'green', 'blue' };

// Add elements to a list after it has been created
List<String> moreColors = new List<String>();
moreColors.add('orange');
moreColors.add('purple');
Copy
List elements can be read by specifying an index between square brackets, just like with array elements. Also, you can use the get() method to read a list element. This example is based on the lists created in the previous example and shows how to read list elements using either method. The example also shows how to iterate over array elements.

// Get elements from a list
String color1 = moreColors.get(0);
String color2 = moreColors[0];
System.assertEquals(color1, color2);

// Iterate over a list to read elements
for(Integer i=0;i<colors.size();i++) {
    // Write value to the debug log
    System.debug(colors[i]);
}

/*Apex Classes
One of the benefits of Apex classes is code reuse. Class methods can be called by triggers and other classes. 
The following tutorial walks you through saving an example class in your organization, 
using this class to send emails, and inspecting debug logs.
Save an Apex Class
Save the EmailManager class in your organization:

Open the Developer Console under Your Name or the quick access menu (Setup gear icon).
In the Developer Console, click File | New | Apex Class, and enter EmailManager for the class name, and then click OK.
Replace the default class body with the EmailManager class example.
The EmailManager class has a public method (sendMail()) that sends email 
and uses built-in Messaging methods of the Apex class library. 
Also, this class has a private helper method (inspectResults()), 
which can’t be called externally because it is private but is used only within the class. 
This helper method inspects the results of the email send call and is called by sendMail().
*/
public class EmailManager {

    // Public method
    public void sendMail(String address, String subject, String body) {
        // Create an email message object
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] {address};
        mail.setToAddresses(toAddresses);
        mail.setSubject(subject);
        mail.setPlainTextBody(body);
        // Pass this email message to the built-in sendEmail method 
        // of the Messaging class
        Messaging.SendEmailResult[] results = Messaging.sendEmail(
                                 new Messaging.SingleEmailMessage[] { mail });
        
        // Call a helper method to inspect the returned results
        inspectResults(results);
    }
    
    // Helper method
    private static Boolean inspectResults(Messaging.SendEmailResult[] results) {
        Boolean sendResult = true;
        
        // sendEmail returns an array of result objects.
        // Iterate through the list to inspect results. 
        // In this class, the methods send only one email, 
        // so we should have only one result.
        for (Messaging.SendEmailResult res : results) {
            if (res.isSuccess()) {
                System.debug('Email sent successfully');
            }
            else {
                sendResult = false;
                System.debug('The following errors occurred: ' + res.getErrors());                 
            }
        }
        
        return sendResult;
    }

}
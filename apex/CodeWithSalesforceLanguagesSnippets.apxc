//from: https://trailhead.salesforce.com/modules/platform_dev_basics/units/platform_dev_basics_code
/*Earlier, we talked about Process Builder as a low-code tool. While it’s low-code, 
you can also extend the functionality of Process Builder by writing a little code. 
Let’s go back to DreamHouse and take a look at a process that sends a push notification whenever a home price changes.

From Setup, search Quick Find for Process Builder and open the Process Builder page.
Click Price Change Push Notification.
Under Immediate Actions, click Push Notification.
Notice the value in the Apex Class field. From the gear menu up top, open the Developer Console.
Click File | Open and use the Filter bar to find PushPriceChangeNotification. 
Double-click to open it in the Developer Console.
If you’ve ever developed in Java, you can probably figure out most of what’s going on in this class. 
Again, we’re not going to go over every detail of this implementation. 
Aside from the Java-like syntax, there are a couple other things to note.
*/


    @InvocableMethod(label='Push Price Change Notification')
/* */    
    Property__c property = [SELECT Name, Price__c from Property__c WHERE Id=:propId];
/* */

public with sharing class PushPriceChangeNotification {
    
    @InvocableMethod(label='Push Price Change Notification')
    public static void pushNotification(List<Id> propertyId) {
        String pushServerURL;
	    Dreamhouse_Settings__c settings = Dreamhouse_Settings__c.getOrgDefaults();
        if (!Test.isRunningTest()) {
        	if (settings == null || settings.Push_Server_URL__c == null) {
	            System.debug('Push_Server_URL not set. Aborting PushPriceChangeNotification process action');
                return;
            } else {
            	pushServerURL = settings.Push_Server_URL__c;    
            }
        }
        Id propId = propertyId[0]; // If bulk, only post first to avoid spamming
        Property__c property = [SELECT Name, Price__c from Property__c WHERE Id=:propId];
        String message = property.Name + '. New Price: $' + property.Price__c.setScale(0).format();
        
        Set<String> userIds = new Set<String>();

        List<Favorite__c> favorites = [SELECT user__c from favorite__c WHERE property__c=:propId];
        for (Favorite__c favorite : favorites) {
        	userIds.add(favorite.user__c);	    
        }
        
		Map<String,Object> payload = new Map<String,Object>();
		payload.put('message', message);
		payload.put('userIds', userIds);
        String body = JSON.serialize(payload);    
        System.enqueueJob(new QueueablePushCall(pushServerURL, 'POST', body));
    }
    
    public class QueueablePushCall implements System.Queueable, Database.AllowsCallouts {
        
        private final String url;
        private final String method;
        private final String body;
        
        public QueueablePushCall(String url, String method, String body) {
            this.url = url;
            this.method = method;
            this.body = body;
        }
        
        public void execute(System.QueueableContext ctx) {
            HttpRequest req = new HttpRequest();
            req.setMethod(method);
            req.setHeader('Content-Type', 'application/json');
            req.setBody(body);
            Http http = new Http();
            HttpResponse res;
            if (!Test.isRunningTest()) {
	            req.setEndpoint(url);
	        	res = http.send(req);
            }
        }

    }
   
}

/*

First, notice the @InvocableMethod annotation before the method signature. It has a label attribute that allows other tools like Process Builder to execute the method. Another thing to notice is that there are a few queries in the method body.*/